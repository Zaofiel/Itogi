import sqlite3
from config import *

work = [
    ("–£—á–∏—Ç–µ–ª—å", "–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π",),
    ("–£—á–∏—Ç–µ–ª—å", "–õ—é–±–ª—é –¥–µ—Ç–µ–π"),
    ("–£—á–∏—Ç–µ–ª—å", "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π"),
    ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π"),
    ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π"),
    ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–õ–æ–≥–∏—á–Ω—ã–π"),
    ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–õ—é–±–ª—é –∏–≥—Ä—ã"),
    ("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π"),
    ("–î–∏–∑–∞–π–Ω–µ—Ä", "–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π"),
    ("–î–∏–∑–∞–π–Ω–µ—Ä", "–≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π"),             
]

teacher = '''üë®üè´ –£—á–∏—Ç–µ–ª—å
                –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:
                –ü—Ä–µ–ø–æ–¥–∞–µ—Ç –ø—Ä–µ–¥–º–µ—Ç—ã, –≤–æ—Å–ø–∏—Ç—ã–≤–∞–µ—Ç –∏ —Ä–∞–∑–≤–∏–≤–∞–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤.
                –ü–ª—é—Å—ã:
                ‚úì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ª–∏—è—Ç—å –Ω–∞ –±—É–¥—É—â–µ–µ –ø–æ–∫–æ–ª–µ–Ω–∏–µ
                ‚úì –¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ —É—Ä–æ–∫–∞–º
                ‚úì –î–ª–∏–Ω–Ω—ã–π –æ—Ç–ø—É—Å–∫ –ª–µ—Ç–æ–º
                –ú–∏–Ω—É—Å—ã:
                ‚úó –í—ã—Å–æ–∫–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
                ‚úó –ß–∞—Å—Ç–æ ‚Äî –Ω–∏–∑–∫–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
                –ù–∞–≤—ã–∫–∏:
                –ü–µ–¥–∞–≥–æ–≥–∏–∫–∞, —Ç–µ—Ä–ø–µ–Ω–∏–µ, —Ö–∞—Ä–∏–∑–º–∞'''

arhet = '''üèõÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä
–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:
–ü—Ä–æ–µ–∫—Ç–∏—Ä—É–µ—Ç –∑–¥–∞–Ω–∏—è –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞.
–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
‚Ä¢ –°–æ—á–µ—Ç–∞–µ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∏—é –∏ –∏—Å–∫—É—Å—Å—Ç–≤–æ
‚Ä¢ –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–æ–≤
–ü–ª—é—Å—ã:
‚úì –†–µ–∞–ª—å–Ω—ã–µ –≤–æ–ø–ª–æ—â–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
‚úì –ü—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è
–ú–∏–Ω—É—Å—ã:
‚úó –í—ã—Å–æ–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
‚úó –î–æ–ª–≥–æ–µ –æ–±—É—á–µ–Ω–∏–µ
–ß—Ç–æ —É—á–∏—Ç—å:
AutoCAD, Revit, 3D Max'''

program = '''üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç
–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:
–ü–∏—à–µ—Ç –∫–æ–¥ –¥–ª—è —Å–∞–π—Ç–æ–≤, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –∏–≥—Ä –∏ –ò–ò.
–Ø–∑—ã–∫–∏:
Python (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö), JavaScript (–¥–ª—è —Å–∞–π—Ç–æ–≤), C++ (–¥–ª—è –∏–≥—Ä)
–ü–ª—é—Å—ã:
‚úì –û–≥—Ä–æ–º–Ω—ã–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
‚úì –ú–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –ª—é–±–æ–π —Ç–æ—á–∫–∏ –º–∏—Ä–∞
–ú–∏–Ω—É—Å—ã:
‚úó –ù—É–∂–Ω–æ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á–∏—Ç—å—Å—è
‚úó –°–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞
–°—Ç–∞—Ä—Ç:
–ò–∑—É—á–∏—Ç–µ HTML/CSS, –∑–∞—Ç–µ–º Python –∏–ª–∏ JavaScript'''

desiner = ''''üé® –î–∏–∑–∞–π–Ω–µ—Ä
–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è:
–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è (–ª–æ–≥–æ—Ç–∏–ø—ã, –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã, –∏–Ω—Ç–µ—Ä—å–µ—Ä—ã).
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:
‚Ä¢ –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω
‚Ä¢ UX/UI-–¥–∏–∑–∞–π–Ω
‚Ä¢ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
–ü–ª—é—Å—ã:
‚úì –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —É–¥–∞–ª–µ–Ω–Ω–æ
‚úì –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ —Ä—ã–Ω–∫–µ
–ú–∏–Ω—É—Å—ã:
‚úó –°—É–±—ä–µ–∫—Ç–∏–≤–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–±–æ—Ç—ã
‚úó –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
Figma, Adobe Photoshop, Illustrator'''
class Work:
    def __init__(self, db):
        self.db = db

    def create_tables(self):
        conn = sqlite3.connect(self.db)
        with conn:
            conn.execute('''
            CREATE TABLE work (
                works TEXT,
                reki TEXT,
                desk TEXT
            )
        ''')
            conn.execute('''
            CREATE TABLE users(
                        id INTEGER,
                        reki_us TEXT
                        )
                    ''')
            conn.executemany('INSERT INTO work (works,reki) VALUES(?,?)', work)
            conn.commit()
        with conn:
                conn.execute('UPDATE work SET desk = ? WHERE works = "–£—á–∏—Ç–µ–ª—å"', (teacher,))
                conn.execute('UPDATE work SET desk = ? WHERE works = "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"', (arhet,))
                conn.execute('UPDATE work SET desk = ? WHERE works = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"', (program,))
                conn.execute('UPDATE work SET desk = ? WHERE works = "–î–∏–∑–∞–π–Ω–µ—Ä"', (desiner,))
                conn.commit()


    def registr(self, id, reki):
        conn = sqlite3.connect(self.db)
        with conn:
            conn.execute('INSERT INTO users (id, reki_us) VALUES(?,?)', (id, reki))
            conn.commit()

    def perebor(self):
        conn = sqlite3.connect(self.db)
        with conn:
            sql = conn.execute('SELECT reki FROM work').fetchall()
            conn.commit()
        return sql
    
    def recomend_work(self, user_id):
        conn = sqlite3.connect(self.db)
        with conn:
            sql = conn.execute('SELECT reki_us FROM users WHERE id = ?', (user_id,)).fetchall()
            res = ''
            sort = []
            for i in sql:
                res = conn.execute('SELECT works FROM work WHERE reki = ?', (i)).fetchall()
                for item in res:
                    if item not in sort:
                        sort.append(item)
                result = ", ".join(it[0] for it in sort)
            conn.commit()
        return result

    def podbor_raboti(self, id):
        conn= sqlite3.connect(self.db)
        with conn:
            res = []
            sql = conn.execute('SELECT reki_us FROM users WHERE id = ?', (id,)).fetchall()
            for i in sql:
                sql = conn.execute('SELECT works FROM work WHERE reki = ?', (i)).fetchall()
                res.append(sql)
                for item in res:
                    if item not in res:
                        res.append(item)
            conn.commit()
            res = [item[0] for item in res if item]
            res = list(set(res))
            return res
        
    def deskription(self, reki):
        conn = sqlite3.connect(self.db)
        with conn:
            sql = conn.execute('SELECT desk FROM work WHERE works = ?', (reki,)).fetchone()
            conn.commit()
            return sql
        
    def delete_user(self, user_id):
        conn = sqlite3.connect(self.db)
        with conn:
            conn.execute('DELETE FROM users WHERE id = ?', (user_id,))
            conn.commit()

if __name__ == '__main__':
    manager = Work(database)
    manager.create_tables()